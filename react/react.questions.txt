git link: https://github.com/sudheerj/reactjs-interview-questions

============================ 27-06-2024 ================================

react fundamentals basic 1

1) what is react why using react.

2) react is library or framework.

3) difference between library and framework.
 library:
     A library is a collection of reusable functions, modules, or components that you can call when neede

 framework:
    A framework provides a structured environment or "skeleton" for building applications, enforcing certain rules and patterns

4) why react is library.
    i)   React is considered a library rather than a framework because of its primary focus and the way it provides functionality.
    ii)  React is designed specifically for building user interfaces (UIs).
    iii) React only deals with the view layer of the application (the "V" in MVC). It doesn’t provide solutions for things like routing, HTTP requests, or state management out of the box.

=====================================================================

react fundamentals basic 2

1) react file extension

2) explain tsx or jsx extension in react

3) typs of react hooks  

    useState    - State management.
    useEffect   - Side effects management.
    useContext  - Access to context
    useRef      - Mutable values and DOM access.
    useMemo     - Memoize expensive calculations
    useCallback - Memoize functions.
    useLayoutEffect - DOM manipulations after render but before paint.
    useForwardRef   - 
    useImperativeHandle - Expose instance values to parent.
    useDebugValue       - Debugging information for custom hooks.
    useReducer          - Complex state logic

    useState: 
        i) Manages state in a functional component.
        ii)It initializes a state variable and provides a function to update that state.
        iii) useState is the most basic hook used for managing local state. 
             
    useEffect: 
        i) useEffect replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount. 
           The second argument (dependency array) allows you to optimize re-execution by only running the effect when specific values change.
        ii) It runs after every render by default, but you can control when it re-runs using a dependency array.

    useContext:
        i)   Accesses the React context within a functional component.
        ii)  It allows components to subscribe to a context without using the Context.Consumer API.
        iii) useContext simplifies consuming context in functional components, allowing you to access context values directly.

    useReducer: 
        i) An alternative to useState for managing more complex state logic.
        ii) useReducer is useful for complex state logic, 
            especially when the next state depends on the previous one or when handling multiple sub-values.
    useRef: 
        i) Creates a mutable reference that persists across renders, 
            commonly used to access DOM elements or store mutable values.
        ii) useRef is often used to access or manipulate DOM elements directly or store values that don't cause re-renders when updated.

    useMemo: 
        i)  Memoizes expensive computations so they’re only re-computed when their dependencies change.
        ii) Optimizes performance by caching the result of expensive calculations.
        iii) useMemo prevents recalculating values unnecessarily by storing the result of the computation unless its dependencies change.

    useCallback :
        i) Memoizes functions to prevent unnecessary re-creation of functions on each render.
    
    useLayoutEffect:
        i) useLayoutEffect is similar to useEffect but runs after rendering and before the browser updates the screen, 
           useful for reading layout from the DOM.

    useImperativeHandle: 
        i) useImperativeHandle is used with forwardRef to allow child components to expose specific functions or values to the parent component via ref.

4) react hooks execution order

5) props and state difference
    Props: Passed from parent to child and are immutable. 
          They are used to configure components and make them reusable.

    State:  Managed within the component itself and is mutable. 
          It holds data that can change and affect the component’s output dynamically.


6) how to pass props in another component

7) props drilling in react explain

8) what is useContext 

9) where to use useContext give example

10) difference between useState and useEffect

11) use of dependencies in hooks

12) difference between useMemo and useCallback

13) what is clousers

14) function curry

15) how to use useReduce

16) higher order component in react

17) how to avoid render issue in react component

===================================================================================


react fundamentals basic 3

1) what is style bleed

2)how to avoid style bleed in react

3) react with typescript what 'd'extension file use

4) folder structure of react and good practices

5) use of react router DOM

6) react code compile and execution steps explain.

7) what is react-script.

8) how to bundle react without react-script

9) how to make API calls in react

10) virtual DOM

11) shadow DOM 

12) difference between real DOM , virtual DOM and shadow DOM
    Shadow DOM: 
        Shadow DOM is used for encapsulation of elements and styles within web components, providing isolation and preventing conflicts with the rest of the document.

    Virtual DOM:
        Virtual DOM is used in libraries like React to improve rendering performance by efficiently updating the real DOM after comparing it with a virtual representation.

13) useRef and useImperative hooks explain

14) parent to child props passing

15) child to parent props passing without any state using

16) how to handle global state management

17) explain redux

18) AOT and JIT compilation 

===================================================================================

1) state and props difference

    state: 
        Handled by within the component, state can be mutable based on the user interaction (input)
    props:
      i) Props is like a parameter of the function, 
      ii)  Props are immutable, if we want to change the props, we can do only in the parent component.

2) componet-didmount and unmount

3) useEffect and useLayoutEffect difference


4) difference between fetch and aioxs
    fetch: 
        i) Fetch is helps to make a api calls, And it is a browser API browser supports defaultly.
    
    axios: 
        i) axios provides multiple methods to make api calls,
        ii) This is JS NPM package, we should installed manually

5) useContext explain 
    i) useContext is a functional component hook available in the react .
   ii) useContext is helps to handle Global state management in react.
  iii) access the state value accross the multiple components within the context  
   
6) what is functional component

7) diff functional and class component

    class component:
        i) Uses the ES6 class
       ii) Class component have lifecycle methods , cannot use any hooks
      iii) Less performance compare to functional component because 'this' keyword
    
    functional component:
        i) This is just a javascript function return JSX element.
        ii) Simple structure and fast compare to class components
        iii) Provides different hooks for handling state and side-effects
        iv) modern react uses only functional component.

