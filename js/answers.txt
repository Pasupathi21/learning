JAVASCRIPT:

web apis
    In chrome browser (like a platform) have different apis(piece of software)

    - setTimeout --> timer
    - fetch --> make api calls
    - DOM --> access html elemnt through javascript (DOM not a javascript)
    - localStorage, sessionStorage --> store minimum data as a string type

    above mentioned things are part of browser not a javascript thing.

    Note: we can acces browser apis through the "windows" global object is available on chrome.

===========================================================================================================

types of functions in JAVASCRIPT
    1) function declaration 2) function expression 3) anonymous function 4)function curry 5) arrow function
    6) Immediately invoked function expression 7) callback function 8) constructor function


    function declaration: 

        function define with name function declaration supports hoisting
        eg:
            function test(){
                console.log('test)
            }
-----------------------------------------------------------------------------------------------
    function expression:

        Function expression not supports hoisting, because function is assign to the vairable
        eg1:
            var expression_fn = function () {
                console.log('expression function)
            }
        eg2:
            let arrow_exp = () => {
                console.log("arrow based expression function")
            }
----------------------------------------------------------------------------------------------------

    anonymous function:
        Anonymouse function called as unnamed function, this type of function mostly for callback or Immediately invoked function expression (IIFE)

        eg: [1,2,3].forEach(function(element){
            console.log('Anonymous')
        })
------------------------------------------------------------------------------------------------------

    Arrow function:
        define function with arrow symbole instead of function keyword, arrow functions are more clean, readability and clean
        this type function are use as callback function or function expression
        Note: arrow function doesn't have 'this' object, so we can't instanciate the arrow function

        eg: const arrow_fn = () => {
            console.log('Arrow function)
        }
------------------------------------------------------------------------------------------------------
    IIFE
        This also anonymous function,  can't access the outside the function and this function is self invoking function

        eg: 
            (function(){
                console.log('IIFE)
            })()
------------------------------------------------------------------------------------------------------

    callback function:
        function passed as a argument to another function
        eg:
            [1, 2, 4].map((item) => item *2)
------------------------------------------------------------------------------------------------------

    constructor function

        constructor function declare with Pascal case fromat for naming convention and create instance with 
        'new' keyword to access the all pros through the instance

        eg:
            function HelloWorld(){
                this.message = "message from constructor function"
            }

            const helloWorld = new HelloWorld()
            console.log(helloWorld.message)
-----------------------------------------------------------------------------------------------------------

    first order function:
        A function doesn't take any argument as a function and also, it doesn't return any function that is called 
        first order function    
        
        eg:
            function firstOrderFn(){ console.log('i am a first order function)}

            firstOrderFn()
-----------------------------------------------------------------------------------------------------------
    higher order function:
        A function takes function as a argument and return a new function it's called higher order function

        eg:
            const higherOrderFun = (fn) => return fn

            const newFnFromHigher = higherOrderFun(() => { console.log("fn passed as a argument")})

-----------------------------------------------------------------------------------------------------------
    first class function in javascript:
        In javascript we can use function in different ways , 
        We can use function as 
            i) argument(callback) 2) assign to vairable 3) return function from another fnction
        above reasons function called as firstclass function in javascript

-----------------------------------------------------------------------------------------------------------
    unary function:
        which function wil takes only on argument that is called as unary function
        eg:
            const fn = (oneArg) => console.log(oneArg)
            fn('unary function')

-----------------------------------------------------------------------------------------------------------
    pure function:
        function result or return value only depends on the function parameters, 
        and this function context doesn't affect any side effects(it will not change any value and context of the outside)

        eg: 
            const pureFn = (argument) => return `Your given input value is: ${argument}`
            pureFn('I am pure function')

-----------------------------------------------------------------------------------------------------------

what is prototype in javascript ?
    In JavaScript, arrays, objects, and functions are all able to access methods from their prototype. 
Arrays access methods like .map() from Array.prototype, while objects access methods like .hasOwnProperty() from Object.prototype. 
The prototype chain can be accessed via the __proto__ property, though it's better to use Object.getPrototypeOf() for direct prototype access.

-----------------------------------------------------------------------------------------------------------

what is prototype inheritance in javascript ?
    Prototype inheritance in javascript, Each data type have comes with own set of some prototype property in javascript,
    We can access the all methods from it's prototype property or directly, that is called prototype inheritance.

OOPS in javascript ?


generator function and use ?
    A generator function in JavaScript is a special type of function that can pause its execution and later resume from where it left off. 
    It provides a powerful way to manage control flow, allowing values to be produced lazily one at a time, rather than all at once. 
    Generator functions are declared using the function* syntax, and inside them, the yield keyword is used to pause execution and return a value.

symbol and iterators in javascrit ?

