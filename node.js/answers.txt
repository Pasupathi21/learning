NODE.JS

node.js architecture 

    - node.js is enviroment not a programming language
    - Event-driven and Non-blocking
    - node.js enviroment contains tow major parts
        i) V8 engine ii) libuv

        V8 engine:
            - V8 engine created and developed by JS & c++ language.
            - Main purpose of this engine is converting JS code into machine code and run on the system

        libuv: 
            - this is another on major core part of the node.js enviroment.
            - fully implemented with c++ & JS

            - libuv contain EVENT LOOP and THREAD POOLS (initially 4 THREAD POOLS)
                i) EVENT LOOP  ii) THREAD POOLS

                EVENT LOOP:
                    - it perform to allocate and offload the process into threads
                      heavy process(fs and promise based process) will offload into the thread POOLS
                    
                    - event loop having 4 major callback queues
                       i) settimer-callback ii) I/O callback, iii)setImmediate-call iv) close callback

                       I EVENT LOOP callback will execute above mentioned orders

                       setTime --> setTimeout and setInterval expiration fn will execute

                       I/O --> http networs callback will be execute

                       setImmediate --> setImmediate is fn will be run after the I/O callback it will helpful for the 
                                        running heavy process fn.
                       close callback --> it will trigger all connection close related fn.

        Event Loop:
            i) call-stack  ii) event-loop  iii) callback queue  --> micro and macro queues
                    




stream,buffer and binary in node.js
    Binary:
        Binary data is contain 1s and 0s stored in memory (eg: docs, images, audio or videos)

    Buffer:
        - Buffer is designed to handle binary data
        - Buffer is not a data type
        - Buffer is fixed size 
        - javascrit can't handle binary data only handle string, so Buffer can interact the binary data

    Stream:
        -

==================================================================================================



concurrency and parallelism in node.js

    concurrency -> run multiple tasks within the single thread at same time (achieved by EVENT LOOP)

    parallelism -> run mutliple task with worker thread(multiple thread) like CPU intensive process,
                   cluster module will create child process (it means new RUNTIME INSTANCE ) it will perform tasks in
                   parallely, each process communicate with IPC(inter process communication). and also cluster will use same port for all child processEVENT

what is event driven architecture ?
    

what is stream in node.js ? 
Ref: https://github.com/Pasupathi21/JS-Exercise/blob/main/src/practices/node-stream.js]

        A stream in Node.js is an abstract interface used to handle data in a continuous, efficient manner, 
    especially useful for handling large volumes of data. 
        Streams process data piece by piece (in chunks) rather than all at once, 
    allowing Node.js to handle large amounts of data efficiently without loading everything into memory at once.

    Streams also emit events that help manage the flow of data.
        data:   Emitted when a chunk of data is available to read.
        end:    Emitted when there is no more data to read.
        error:  Emitted when an error occurs during the streaming process.
        finish: Emitted when all data has been written.

==================================================================================================

what is API ?
    API (Application Programming Interface), It is a piece of code can able to integrate different application or plateform.
    Eg: REST API(Representational state transfer)

==================================================================================================
types of API's ?
    Web API's
        i) REST     -> Representational state transfe, GET, POST, PUT, PATCH and DELETE 
       ii) GraphQL  -> Allows clients to request only the data they need in a flexible query format.
      iii) SOAP     -> Simple Object Access Protocal, A more complex protocol than REST, uses XML for requests and responses.
       iv) gRPC     -> Google Remote Procedure Call, Uses Protocol Buffers (binary format) for fast performance. Primarily used for microservices and internal communication within distributed systems.
                        Eg: Google Services      
